#version 430 core

#define IMAGE_SIZE 400
#define PARTICLE_COUNT (1 << 15)

layout(local_size_x = 64) in;

layout(std430, binding = 0) buffer Pos {
    vec2 m[PARTICLE_COUNT];
} pos;

layout(std430, binding = 1) buffer Vel {
    vec2 m[PARTICLE_COUNT];
} vel;

layout(std430, binding = 2) buffer Cnt {
	uint m[IMAGE_SIZE][IMAGE_SIZE];
} cnt;

uniform float dt;

void main()
{
    uint idx = gl_GlobalInvocationID.x;
    vec2 acc = vec2(0);
    uint i;
    for (i = 0; i < PARTICLE_COUNT; i++) {
        vec2 diff = pos.m[i] - pos.m[idx];
        float len = max(1e-10f, length(diff));
        float k = 1e-4f * (len - 0.5f) / len;
        acc += k * diff;
    }

    /* if (pos.m[idx].x < -1) {
        pos.m[idx].x = -2 - pos.m[idx].x;
        vel.m[idx].x = abs(vel.m[idx].x);
    }

    if (pos.m[idx].y < -1) {
        pos.m[idx].y = -2 - pos.m[idx].y;
        vel.m[idx].y = abs(vel.m[idx].y);
    }

    if (pos.m[idx].x > 1) {
        pos.m[idx].x = 2 - pos.m[idx].x;
        vel.m[idx].x = -abs(vel.m[idx].x);
    }

    if (pos.m[idx].y > 1) {
        pos.m[idx].y = 2 - pos.m[idx].y;
        vel.m[idx].y = -abs(vel.m[idx].y);
    } */

    float t = dt; // min(dt, 0.1);
    pos.m[idx] += t * vel.m[idx] + 0.5f * t * t * acc;
    vel.m[idx] += t * acc;
    vel.m[idx] *= 0.97f;

	uvec2 xy = uvec2(IMAGE_SIZE * 0.5f * (pos.m[idx] + vec2(1)));
	cnt.m[xy.x][xy.y]++;
}
